# FabrikamMcp - CI/CD Pipeline
# Deploys the MCP server to Azure App Service when changes are made to FabrikamMcp/

name: Deploy FabrikamMcp

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'FabrikamMcp/**'
      - '.github/workflows/deploy-mcp.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'FabrikamMcp/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      api_url:
        description: 'FabrikamApi Base URL (leave empty to auto-detect)'
        required: false
        type: string

env:
  AZURE_WEBAPP_NAME: fabrikam-mcp-${{ github.event.inputs.environment || 'dev' }}
  AZURE_API_WEBAPP_NAME: fabrikam-api-${{ github.event.inputs.environment || 'dev' }}
  AZURE_WEBAPP_PACKAGE_PATH: './FabrikamMcp/src'
  DOTNET_VERSION: '9.0.x'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/McpServer.csproj

    - name: 🔨 Build application
      run: dotnet build ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/McpServer.csproj --configuration Release --no-restore

    - name: 🧪 Run tests
      run: dotnet test ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/McpServer.csproj --no-build --verbosity normal

    - name: 📋 Publish application
      run: dotnet publish ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/McpServer.csproj --configuration Release --no-build --output ./publish

    - name: 📤 Upload artifact for deployment
      uses: actions/upload-artifact@v4
      with:
        name: fabrikam-mcp
        path: ./publish

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ github.event.inputs.environment || 'development' }}
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: 📥 Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: fabrikam-mcp

    - name: 🔐 Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🔍 Get API URL (if not provided)
      id: get-api-url
      run: |
        if [ -n "${{ github.event.inputs.api_url }}" ]; then
          API_URL="${{ github.event.inputs.api_url }}"
          echo "Using provided API URL: $API_URL"
        else
          API_URL="https://${{ env.AZURE_API_WEBAPP_NAME }}.azurewebsites.net"
          echo "Auto-detected API URL: $API_URL"
        fi
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: ⚙️ Configure App Settings
      run: |
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} \
          --settings "FabrikamApi__BaseUrl=${{ steps.get-api-url.outputs.api_url }}"

    - name: 🚀 Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'Production'
        package: .

    - name: ✅ Verify deployment
      run: |
        echo "🎉 FabrikamMcp deployed successfully!"
        echo "🌐 Application URL: ${{ steps.deploy-to-webapp.outputs.webapp-url }}"
        echo "📊 Status Check: ${{ steps.deploy-to-webapp.outputs.webapp-url }}/status"
        echo "🔗 Connected to API: ${{ steps.get-api-url.outputs.api_url }}"

  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 🏥 Wait for deployment to be ready
      run: sleep 30

    - name: 🔍 Health check MCP server
      run: |
        max_attempts=10
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          echo "MCP health check attempt $attempt/$max_attempts"
          if curl -f -s "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/status"; then
            echo "✅ MCP server health check passed!"
            break
          else
            echo "❌ MCP health check failed, retrying in 15 seconds..."
            sleep 15
            attempt=$((attempt + 1))
          fi
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "💥 MCP health check failed after $max_attempts attempts"
          exit 1
        fi

  integration-test:
    runs-on: ubuntu-latest
    needs: health-check
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 🧪 Test MCP-API integration
      run: |
        echo "🔗 Testing integration between MCP and API..."
        MCP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        API_URL="https://${{ env.AZURE_API_WEBAPP_NAME }}.azurewebsites.net"
        
        # Test MCP status
        echo "Testing MCP status endpoint..."
        MCP_STATUS=$(curl -s "$MCP_URL/status" | jq -r '.Status // "Unknown"')
        echo "MCP Status: $MCP_STATUS"
        
        # Test API health
        echo "Testing API health endpoint..."
        API_HEALTH=$(curl -s "$API_URL/health" | jq -r '.status // "Unknown"')
        echo "API Health: $API_HEALTH"
        
        # Verify both are healthy
        if [ "$MCP_STATUS" = "Ready" ] && [ "$API_HEALTH" = "Healthy" ]; then
          echo "✅ Integration test passed! Both services are healthy and connected."
        else
          echo "❌ Integration test failed. MCP: $MCP_STATUS, API: $API_HEALTH"
          exit 1
        fi
