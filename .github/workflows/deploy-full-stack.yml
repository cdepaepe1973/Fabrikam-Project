# Coordinated deployment workflow for Fabrikam monorepo
# This workflow deploys both API and MCP services when core changes are made
# 
# üîß Fork-Friendly Design:
# - Uses flexible variables/secrets that work across different Azure tenants
# - Auto-detects deployment targets using repository variables
# - Compatible with auto-fix-cicd.yml for Azure Portal integration

name: Deploy Fabrikam Full Stack

on:
  push:
    branches:
      - main
    paths:
      - "FabrikamApi/**"
      - "FabrikamMcp/**"
      - ".github/workflows/deploy-full-stack.yml"
  workflow_dispatch:
    inputs:
      deploy_api:
        description: "Deploy API service"
        required: true
        default: true
        type: boolean
      deploy_mcp:
        description: "Deploy MCP service"
        required: true
        default: true
        type: boolean

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      mcp-changed: ${{ steps.changes.outputs.mcp }}
      should-deploy-api: ${{ steps.decide.outputs.deploy-api }}
      should-deploy-mcp: ${{ steps.decide.outputs.deploy-mcp }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'FabrikamApi/**'
            mcp:
              - 'FabrikamMcp/**'

      - name: Decide what to deploy
        id: decide
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "deploy-api=${{ github.event.inputs.deploy_api }}" >> $GITHUB_OUTPUT
            echo "deploy-mcp=${{ github.event.inputs.deploy_mcp }}" >> $GITHUB_OUTPUT
          else
            echo "deploy-api=${{ steps.changes.outputs.api }}" >> $GITHUB_OUTPUT
            echo "deploy-mcp=${{ steps.changes.outputs.mcp }}" >> $GITHUB_OUTPUT
          fi

          echo "üîç Deployment decisions:"
          echo "  API: ${{ steps.changes.outputs.api || github.event.inputs.deploy_api }}"
          echo "  MCP: ${{ steps.changes.outputs.mcp || github.event.inputs.deploy_mcp }}"

  build-api:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-deploy-api == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x"

      - name: Build API
        run: dotnet build FabrikamApi/src/FabrikamApi.csproj --configuration Release

      - name: Publish API
        run: |
          echo "üì¶ Publishing FabrikamApi..."
          dotnet publish FabrikamApi/src/FabrikamApi.csproj -c Release -o ./publish-api --no-build

      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: fabrikam-api
          path: ./publish-api

  build-mcp:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-deploy-mcp == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.x"

      - name: Build MCP
        run: dotnet build FabrikamMcp/src/FabrikamMcp.csproj --configuration Release

      - name: Publish MCP
        run: |
          echo "üì¶ Publishing FabrikamMcp..."
          dotnet publish FabrikamMcp/src/FabrikamMcp.csproj -c Release -o ./publish-mcp --no-build

      - name: Upload MCP artifact
        uses: actions/upload-artifact@v4
        with:
          name: fabrikam-mcp
          path: ./publish-mcp

  deploy-api:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-api]
    if: needs.detect-changes.outputs.should-deploy-api == 'true'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: fabrikam-api

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID || secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID || secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID || secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      - name: Deploy API to Azure
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.AZURE_API_APP_NAME || 'fabrikam-api-dev' }}
          slot-name: "Production"
          package: .

  deploy-mcp:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-mcp]
    if: needs.detect-changes.outputs.should-deploy-mcp == 'true'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download MCP artifact
        uses: actions/download-artifact@v4
        with:
          name: fabrikam-mcp

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID || secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID || secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID || secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      - name: Deploy MCP to Azure
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.AZURE_MCP_APP_NAME || 'fabrikam-mcp-dev' }}
          slot-name: "Production"
          package: .

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-api, deploy-mcp]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ **Fabrikam Full Stack Deployment Summary**"
          echo "============================================="
          echo ""
          echo "üìä **Services Processed:**"
          echo "  üîó API Service: ${{ needs.detect-changes.outputs.should-deploy-api == 'true' && '‚úÖ Deployed' || '‚è≠Ô∏è Skipped' }}"
          echo "  ü§ñ MCP Service: ${{ needs.detect-changes.outputs.should-deploy-mcp == 'true' && '‚úÖ Deployed' || '‚è≠Ô∏è Skipped' }}"
          echo ""
          echo "üåê **Application URLs:**"
          echo "  üì° API: https://${{ vars.API_DOMAIN || 'fabrikam-api-dev.levelupcsp.com' }}"
          echo "  üîå MCP: https://${{ vars.MCP_DOMAIN || 'fabrikam-mcp-dev.levelupcsp.com' }}"
          echo ""
          echo "‚ú® Monorepo deployment completed successfully!"
