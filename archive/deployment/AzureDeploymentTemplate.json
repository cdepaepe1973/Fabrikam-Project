{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "Deploys Fabrikam AI Demo platform with API and MCP services",
    "author": "Fabrikam Team"
  },
  "parameters": {
    "baseName": {
      "type": "string",
      "defaultValue": "FabrikamAIDemo",
      "minLength": 3,
      "maxLength": 15,
      "metadata": {
        "description": "Base name for all resources. Will be combined with a unique suffix."
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "Development",
      "allowedValues": [
        "Development",
        "Production"
      ],
      "metadata": {
        "description": "Environment for the deployment. Development: For testing and demo preparation. Production: For live business demos."
      }
    },
    "githubRepository": {
      "type": "string",
      "defaultValue": "https://github.com/davebirr/Fabrikam-Project",
      "metadata": {
        "description": "URL to your GitHub repository fork"
      }
    },
    "githubToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "GitHub Personal Access Token for deployment automation (optional - can be configured later)"
      }
    },
    "customDomain": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Custom domain name (e.g., levelupcsp.com). Leave empty to use Azure default domains (.azurewebsites.net)"
      }
    },
    "enableCustomDomains": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable custom domain configuration. Requires DNS records to be created manually."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for all resources"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "F1",
        "B1",
        "B2",
        "S1",
        "S2",
        "P1v2",
        "P2v2"
      ],
      "metadata": {
        "description": "App Service Plan pricing tier"
      }
    },
    "databaseProvider": {
      "type": "string",
      "defaultValue": "InMemory",
      "allowedValues": [
        "InMemory",
        "SqlServer"
      ],
      "metadata": {
        "description": "Database provider choice: InMemory (quick demos, no persistence) or SqlServer (production-like, persistent data)"
      }
    },
    "authenticationMode": {
      "type": "string",
      "defaultValue": "JwtTokens",
      "allowedValues": [
        "Disabled",
        "JwtTokens", 
        "EntraExternalId"
      ],
      "metadata": {
        "description": "Authentication mode for the Fabrikam demo platform. Disabled: GUID tracking only, no authentication barriers. JwtTokens: Each demo user registers and receives a secure JWT token for their AI agent/MCP client - tokens expire and need periodic refresh for security. EntraExternalId: Full OAuth 2.0 with Microsoft Entra External ID integration for enterprise identity."
      }
    },
    "enableUserTracking": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable user session tracking across requests using GUID-based tracking"
      }
    },
    "entraExternalIdTenant": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Entra External ID tenant domain (e.g., contoso.onmicrosoft.com). Required when using EntraExternalId authentication mode."
      }
    },
    "entraExternalIdClientId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Entra External ID application client ID. Required when using EntraExternalId authentication mode."
      }
    },
    "sqlAdminUsername": {
      "type": "string",
      "defaultValue": "fabrikamadmin",
      "metadata": {
        "description": "SQL Server administrator username (only used when databaseProvider is SqlServer)"
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "defaultValue": "[concat('Fabr1kam!', substring(uniqueString(resourceGroup().id), 0, 8))]",
      "metadata": {
        "description": "SQL Server administrator password (only used when databaseProvider is SqlServer). Auto-generated if not provided."
      }
    },
    "deploymentUser": {
      "type": "string",
      "metadata": {
        "description": "Object ID of the user deploying this template. This user will be granted Key Vault Secrets Officer permissions. Get this with: az ad signed-in-user show --query id -o tsv"
      }
    }
  },
  "variables": {
    "suffix": "[substring(toLower(uniqueString(resourceGroup().id, resourceGroup().location)), 0, 4)]",
    "resourceGroupNameParts": "[split(resourceGroup().name, '-')]",
    "hasResourceGroupSuffix": "[and(greater(length(variables('resourceGroupNameParts')), 2), equals(length(last(variables('resourceGroupNameParts'))), 4))]",
    "extractedSuffix": "[if(variables('hasResourceGroupSuffix'), last(variables('resourceGroupNameParts')), '')]",
    "generatedSuffix": "[substring(uniqueString(resourceGroup().id), 0, 4)]",
    "finalSuffix": "[if(variables('hasResourceGroupSuffix'), variables('extractedSuffix'), variables('generatedSuffix'))]",
    "resourceBaseName": "[concat(parameters('baseName'), '-', parameters('environment'), '-', variables('finalSuffix'))]",
    "apiAppName": "[concat('fabrikam-api-', parameters('environment'), '-', variables('finalSuffix'))]",
    "mcpAppName": "[concat('fabrikam-mcp-', parameters('environment'), '-', variables('finalSuffix'))]",
    "apiPlanName": "[concat('plan-api-', parameters('environment'), '-', variables('finalSuffix'))]",
    "mcpPlanName": "[concat('plan-mcp-', parameters('environment'), '-', variables('finalSuffix'))]",
    "logWorkspaceName": "[concat('log-', parameters('environment'), '-', variables('finalSuffix'))]",
    "apiInsightsName": "[concat('appi-api-', parameters('environment'), '-', variables('finalSuffix'))]",
    "mcpInsightsName": "[concat('appi-mcp-', parameters('environment'), '-', variables('finalSuffix'))]",
    "apiUrl": "[if(parameters('enableCustomDomains'), concat('https://fabrikam-api-', parameters('environment'), '-', variables('finalSuffix'), '.', parameters('customDomain')), concat('https://', variables('apiAppName'), '.azurewebsites.net'))]",
    "mcpUrl": "[if(parameters('enableCustomDomains'), concat('https://fabrikam-mcp-', parameters('environment'), '-', variables('finalSuffix'), '.', parameters('customDomain')), concat('https://', variables('mcpAppName'), '.azurewebsites.net'))]",
    "apiCustomDomain": "[concat('fabrikam-api-', parameters('environment'), '-', variables('finalSuffix'), '.', parameters('customDomain'))]",
    "mcpCustomDomain": "[concat('fabrikam-mcp-', parameters('environment'), '-', variables('finalSuffix'), '.', parameters('customDomain'))]",
    "sqlServerName": "[concat('sql-', parameters('environment'), '-', variables('finalSuffix'))]",
    "sqlDatabaseName": "[concat('sqldb-', parameters('environment'), '-', variables('finalSuffix'))]",
    "keyVaultName": "[concat('kv-', parameters('environment'), '-', variables('finalSuffix'))]",
    "jwtSecretName": "FabrikamJwtSecret",
    "sqlConnectionSecretName": "DefaultConnection",
    "keyVaultSecretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
    "keyVaultSecretsOfficerRoleId": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
    "isAuthenticationEnabled": "[not(equals(parameters('authenticationMode'), 'Disabled'))]",
    "isJwtMode": "[equals(parameters('authenticationMode'), 'JwtTokens')]",
    "isEntraMode": "[equals(parameters('authenticationMode'), 'EntraExternalId')]",
    "demoApiKeyValue": "fabrikam-demo-2025-secure-key-enterprise",
    "guidTrackingSalt": "fabrikam-guid-tracking-salt-2025",
    "demoUserCredentials": "Demo users: admin@fabrikam.com/FabrikamDemo2025!, user@fabrikam.com/UserDemo2025!"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[variables('logWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "features": {
          "searchVersion": 1,
          "legacy": 0,
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('apiInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logWorkspaceName'))]"
      ],
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logWorkspaceName'))]"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('mcpInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logWorkspaceName'))]"
      ],
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logWorkspaceName'))]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[variables('apiPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('skuName')]"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[variables('mcpPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('skuName')]"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[variables('apiAppName')]",
      "location": "[parameters('location')]",
      "kind": "app,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('apiPlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('apiInsightsName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('apiPlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "linuxFxVersion": "DOTNETCORE|9.0",
          "alwaysOn": "[if(equals(parameters('skuName'), 'F1'), false(), true())]",
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "appSettings": [
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('apiInsightsName'))).ConnectionString]"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "[parameters('environment')]"
            },
            {
              "name": "Database__Provider",
              "value": "[parameters('databaseProvider')]"
            },
            {
              "name": "ConnectionStrings__DefaultConnection",
              "value": "[if(equals(parameters('databaseProvider'), 'SqlServer'), concat('@Microsoft.KeyVault(VaultName=', variables('keyVaultName'), ';SecretName=', variables('sqlConnectionSecretName'), ')'), '')]"
            },
            {
              "name": "Authentication__Strategy",
              "value": "[if(variables('isAuthenticationEnabled'), 'AspNetIdentity', 'Disabled')]"
            },
            {
              "name": "Authentication__Mode",
              "value": "[parameters('authenticationMode')]"
            },
            {
              "name": "Authentication__AspNetIdentity__Jwt__Issuer",
              "value": "[variables('apiUrl')]"
            },
            {
              "name": "Authentication__AspNetIdentity__Jwt__Audience",
              "value": "fabrikam-api"
            },
            {
              "name": "Authentication__AspNetIdentity__Jwt__SecretKey",
              "value": "[if(variables('isAuthenticationEnabled'), concat('@Microsoft.KeyVault(VaultName=', variables('keyVaultName'), ';SecretName=', variables('jwtSecretName'), ')'), '')]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[variables('mcpAppName')]",
      "location": "[parameters('location')]",
      "kind": "app,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('mcpPlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('mcpInsightsName'))]",
        "[resourceId('Microsoft.Web/sites', variables('apiAppName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('mcpPlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "linuxFxVersion": "DOTNETCORE|9.0",
          "alwaysOn": "[if(equals(parameters('skuName'), 'F1'), false(), true())]",
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "appSettings": [
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('mcpInsightsName'))).ConnectionString]"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "[parameters('environment')]"
            },
            {
              "name": "FabrikamApi__BaseUrl",
              "value": "[variables('apiUrl')]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            }
          ]
        }
      }
    },
    {
      "condition": "[equals(parameters('databaseProvider'), 'SqlServer')]",
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2021-11-01",
      "name": "[variables('sqlServerName')]",
      "location": "[parameters('location')]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdminUsername')]",
        "administratorLoginPassword": "[parameters('sqlAdminPassword')]",
        "version": "12.0",
        "minimalTlsVersion": "1.2",
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "condition": "[equals(parameters('databaseProvider'), 'SqlServer')]",
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2014-04-01",
      "name": "[concat(variables('sqlServerName'), '/AllowAzureServices')]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
      ],
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      }
    },
    {
      "condition": "[equals(parameters('databaseProvider'), 'SqlServer')]",
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2017-03-01-preview",
      "name": "[concat(variables('sqlServerName'), '/', variables('sqlDatabaseName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
      ],
      "sku": {
        "name": "S0",
        "tier": "Standard"
      },
      "properties": {
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "maxSizeBytes": 268435456000,
        "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
        "zoneRedundant": false,
        "readScale": "Disabled",
        "requestedBackupStorageRedundancy": "Local"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-11-01-preview",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "enabledForDeployment": false,
        "enabledForTemplateDeployment": false,
        "enabledForDiskEncryption": false,
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "publicNetworkAccess": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('apiAppName'))]"
      ]
    },
    {
      "condition": "[equals(parameters('databaseProvider'), 'SqlServer')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/', variables('sqlConnectionSecretName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
      ],
      "properties": {
        "value": "[concat('Server=tcp:', reference(resourceId('Microsoft.Sql/servers', variables('sqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('sqlDatabaseName'), ';Persist Security Info=False;User ID=', parameters('sqlAdminUsername'), ';Password=', parameters('sqlAdminPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/', variables('jwtSecretName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[base64(concat(uniqueString(resourceGroup().id), uniqueString(subscription().id), uniqueString(variables('suffix'))))]"
      }
    },
    {
      "condition": "[variables('isJwtMode')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/demo-api-key')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[variables('demoApiKeyValue')]"
      }
    },
    {
      "condition": "[variables('isEntraMode')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview", 
      "name": "[concat(variables('keyVaultName'), '/entra-client-id')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('entraExternalIdClientId')]"
      }
    },
    {
      "condition": "[variables('isEntraMode')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/entra-client-secret')]", 
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "PLACEHOLDER-SET-IN-AZURE-PORTAL"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/guid-tracking-salt')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[variables('guidTrackingSalt')]"
      }
    },
    {
      "condition": "[variables('isJwtMode')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/demo-user-credentials')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[variables('demoUserCredentials')]"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, variables('apiAppName'), variables('keyVaultSecretsUserRoleId'))]",
      "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Web/sites', variables('apiAppName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretsUserRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('apiAppName')), '2021-02-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, variables('mcpAppName'), variables('keyVaultSecretsUserRoleId'))]",
      "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Web/sites', variables('mcpAppName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretsUserRoleId'))]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('mcpAppName')), '2021-02-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, parameters('deploymentUser'), variables('keyVaultSecretsOfficerRoleId'))]",
      "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretsOfficerRoleId'))]",
        "principalId": "[parameters('deploymentUser')]",
        "principalType": "User"
      }
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "instanceSuffix": {
      "type": "string",
      "value": "[variables('suffix')]"
    },
    "apiAppName": {
      "type": "string",
      "value": "[variables('apiAppName')]"
    },
    "mcpAppName": {
      "type": "string",
      "value": "[variables('mcpAppName')]"
    },
    "apiUrl": {
      "type": "string",
      "value": "[variables('apiUrl')]"
    },
    "mcpUrl": {
      "type": "string",
      "value": "[variables('mcpUrl')]"
    },
    "apiHealthCheck": {
      "type": "string",
      "value": "[concat(variables('apiUrl'), '/health')]"
    },
    "mcpHealthCheck": {
      "type": "string",
      "value": "[concat(variables('mcpUrl'), '/status')]"
    },
    "customDomainsEnabled": {
      "type": "bool",
      "value": "[parameters('enableCustomDomains')]"
    },
    "apiCustomDomain": {
      "type": "string",
      "value": "[if(parameters('enableCustomDomains'), variables('apiCustomDomain'), 'Not configured')]"
    },
    "mcpCustomDomain": {
      "type": "string",
      "value": "[if(parameters('enableCustomDomains'), variables('mcpCustomDomain'), 'Not configured')]"
    },
    "dnsRecordsNeeded": {
      "type": "string",
      "value": "[if(parameters('enableCustomDomains'), concat('Create CNAME records: ', variables('apiCustomDomain'), ' -> ', variables('apiAppName'), '.azurewebsites.net and ', variables('mcpCustomDomain'), ' -> ', variables('mcpAppName'), '.azurewebsites.net'), 'No custom domains configured')]"
    },
    "databaseProvider": {
      "type": "string",
      "value": "[parameters('databaseProvider')]"
    },
    "sqlServerName": {
      "type": "string",
      "value": "[if(equals(parameters('databaseProvider'), 'SqlServer'), variables('sqlServerName'), 'Not configured - using InMemory')]"
    },
    "sqlDatabaseName": {
      "type": "string",
      "value": "[if(equals(parameters('databaseProvider'), 'SqlServer'), variables('sqlDatabaseName'), 'Not configured - using InMemory')]"
    },
    "keyVaultName": {
      "type": "string", 
      "value": "[variables('keyVaultName')]"
    },
    "authenticationMode": {
      "type": "string",
      "value": "[parameters('authenticationMode')]"
    },
    "authenticationEnabled": {
      "type": "bool",
      "value": "[variables('isAuthenticationEnabled')]"
    },
    "demoCredentials": {
      "type": "string",
      "value": "[if(variables('isJwtMode'), variables('demoUserCredentials'), 'No demo credentials - authentication disabled or using Entra External ID')]"
    },
    "deploymentInstructions": {
      "type": "string",
      "value": "[concat('Resources created successfully! Database: ', parameters('databaseProvider'), ', Authentication: ', parameters('authenticationMode'), '. Key Vault: ', variables('keyVaultName'), '. Next: Set up GitHub Actions CI/CD for automated deployments.')]"
    }
  }
}
